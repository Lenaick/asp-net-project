@model Projet3.Models.Article

@{
    ViewBag.Title = "Articles - Modification";
    Layout = "/Areas/Admin/Views/Shared/_Layout.cshtml";
}

<h2>Articles- Modification</h2>
<hr />

<ul class="nav nav-tabs" id="myTab" role="tablist">
    <li class="nav-item">
        <a class="nav-link active" id="informations-tab" data-toggle="tab" href="#informations" role="tab" aria-controls="informations" aria-selected="true">Informations</a>
    </li>
    <li class="nav-item">
        @if (Model.Commentaire.Count > 0)
        {
            <a class="nav-link" id="comments-tab" data-toggle="tab" href="#comments" role="tab" aria-controls="comments" aria-selected="false">Commentaires</a>
        }
        else
        {
            <a class="nav-link disabled" id="comments-tab" data-toggle="tab" href="#comments" role="tab" aria-controls="comments" aria-selected="false">Commentaires</a>
        }
    </li>
</ul>

<div class="tab-content">
    <div class="tab-pane active" id="informations" role="tabpanel" aria-labelledby="informations-tab">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.idArticle)

                <div class="form-group">
                    @Html.LabelFor(model => model.idCategorie, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("idCategorie", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.idCategorie, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.titre, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.titre, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.titre, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.contenu, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.TextAreaFor(model => model.contenu, new { @class = "form-control froala_editor" })
                        @Html.ValidationMessageFor(model => model.contenu, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.addedum, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.TextAreaFor(model => model.addedum, new { @class = "form-control froala_editor" })
                        @Html.ValidationMessageFor(model => model.addedum, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.publie, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <div class="checkbox">
                            @Html.EditorFor(model => model.publie)
                            @Html.ValidationMessageFor(model => model.publie, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.image, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.image, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.image, "", new { @class = "text-danger" })
                    </div>
                </div>

            </div>
            <div>
                <a href="@Url.Action("Index", "Articles")" class="btn btn-default">
                    <i class="fas fa-chevron-circle-left"></i>
                    Retour liste
                </a>
                <button onclick="$(this).parent('form').get(0).submit();" class="btn btn-primary">
                    <i class="fas fa-check-circle"></i>
                    Enregistrer
                </button>
            </div>
        }
    </div>
    <div class="tab-pane" id="comments" role="tabpanel" aria-labelledby="comments-tab">
        <div>
            <div class="page-header">
                <h1>
                    <small class="pull-right">
                        @if (Model.Commentaire.Count > 1)
                        {
                            @Html.Encode(Model.Commentaire.Count + " commentaires");
                        }
                        else
                        {
                            @Html.Encode(Model.Commentaire.Count + " commentaire");
                        }
                    </small> Commentaires
                </h1>
            </div>
            <div class="comments-list">
                @foreach (var commentaire in Model.Commentaire)
                {
                    <div class="media">
                        <p class="pull-right"><small>@commentaire.date.ToString("dd/MM/yyyy HH:mm")</small></p>
                        <a class="media-left" href="javascript:void();" title="@commentaire.Lecteur.pseudo">
                            <i class="fas fa-user"></i>
                        </a>
                        <div class="media-body">

                            <h4 class="media-heading user_name">@commentaire.Lecteur.pseudo</h4>
                            @commentaire.contenu

                            <form action="@Url.Action("Reply", "Articles", new { @id = commentaire.idCommentaire })" method="post">
                                @Html.AntiForgeryToken()
                                <div class="form-horizontal">
                                    <div class="form-group col-md-6">
                                        <label class="control-label col-md-2" for="@Html.Encode("Reply" + commentaire.idCommentaire)">Réponse</label>
                                        <div class="col-md-10">
                                            @Html.TextArea("Reply" + commentaire.idCommentaire, commentaire.reponse, new { @class = "form-control", Name = "reponse" })
                                            @Html.ValidationMessage("Reply" + commentaire.idCommentaire, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group col-md-6">
                                        <button type="submit" class="btn btn-primary">
                                            <i class="fas fa-check-circle"></i>
                                            Enregistrer
                                        </button>
                                    </div>
                                </div>
                            </form>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Styles {
    @Styles.Render("~/Content/froala_editor")
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/froala_editor")

    <script type="text/javascript">
        $(function () {
            $('form').each(function () {
                if ($(this).data('validator'))
                    $(this).data('validator').settings.ignore = "div.fr-view,#contenu";
            });
            var urlParams = new URLSearchParams(window.location.search);
            if (urlParams.has('navItem')) {
                $('#' + urlParams.get('navItem') + '-tab').tab('show');
            } else {
                $('#myTab li:first-child a').tab('show');
            }
            $('textarea.froala_editor').froalaEditor({
                imageUploadURL: '/FroalaApi/UploadImage',
                imageManagerLoadURL: '/FroalaApi/LoadImages',
                imageManagerDeleteURL: "/FroalaApi/DeleteImage",
                imageManagerDeleteMethod: "POST",
                toolbarButtons: ['fullscreen', 'bold', 'italic', 'underline', 'strikeThrough',
                    'subscript', 'superscript', '|', 'fontFamily', 'fontSize', 'color',
                    'inlineStyle', 'paragraphStyle', '|', 'paragraphFormat', 'align', 'formatOL',
                    'formatUL', 'outdent', 'indent', 'quote', '-', 'insertLink', 'insertImage',
                    'insertVideo', 'insertTable', '|', 'emoticons', 'insertHR', 'selectAll',
                    'clearFormatting', '|', 'html', '|', 'undo', 'redo'],
                height: 300,
                iconsTemplate: 'font_awesome_5',
                fileUpload: false,
            })
                // Catch image removal from the editor.
                .on('froalaEditor.image.removed', function (e, editor, $img) {
                    $.ajax({
                        // Request method.
                        method: "POST",

                        // Request URL.
                        url: "/FroalaApi/DeleteImage",

                        // Request params.
                        data: {
                            src: $img.attr('src')
                        }
                    })
                        .done(function (data) {
                            console.log('image was deleted');
                        })
                        .fail(function (err) {
                            console.log('image delete problem: ' + JSON.stringify(err));
                        })
                })
        });
    </script>
}
